//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "HomePageView.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string HomePageView::genText(const DrTemplateData& HomePageView_view_data)
{
	drogon::OStringStream HomePageView_tmp_stream;
	std::string layoutName{""};
	HomePageView_tmp_stream << "<!DOCTYPE html>\n";
	HomePageView_tmp_stream << "<html lang=\"zh-CN\">\n";
	HomePageView_tmp_stream << "<head>\n";
	HomePageView_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	HomePageView_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
	HomePageView_tmp_stream << "    <title>";
{
    auto & val=HomePageView_view_data["site_name"];
    if(val.type()==typeid(const char *)){
        HomePageView_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        HomePageView_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	HomePageView_tmp_stream << " - 首页</title>\n";
	HomePageView_tmp_stream << "    <style>\n";
	HomePageView_tmp_stream << "        :root {\n";
	HomePageView_tmp_stream << "            --primary-color: #2c3e50;\n";
	HomePageView_tmp_stream << "            --accent-color: #42b983;\n";
	HomePageView_tmp_stream << "            --card-bg: #ffffff;\n";
	HomePageView_tmp_stream << "            --text-color: #34495e;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        * {\n";
	HomePageView_tmp_stream << "            margin: 0;\n";
	HomePageView_tmp_stream << "            padding: 0;\n";
	HomePageView_tmp_stream << "            box-sizing: border-box;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        body {\n";
	HomePageView_tmp_stream << "            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n";
	HomePageView_tmp_stream << "            line-height: 1.6;\n";
	HomePageView_tmp_stream << "            background-color: #f8f9fa;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .container {\n";
	HomePageView_tmp_stream << "            max-width: 1200px;\n";
	HomePageView_tmp_stream << "            margin: 0 auto;\n";
	HomePageView_tmp_stream << "            padding: 20px;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .header {\n";
	HomePageView_tmp_stream << "            background: var(--primary-color);\n";
	HomePageView_tmp_stream << "            color: white;\n";
	HomePageView_tmp_stream << "            padding: 1rem 0;\n";
	HomePageView_tmp_stream << "            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .nav-links a {\n";
	HomePageView_tmp_stream << "            color: white;\n";
	HomePageView_tmp_stream << "            margin-left: 20px;\n";
	HomePageView_tmp_stream << "            text-decoration: none;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .hero-section {\n";
	HomePageView_tmp_stream << "            height: 400px;\n";
	HomePageView_tmp_stream << "            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);\n";
	HomePageView_tmp_stream << "            color: white;\n";
	HomePageView_tmp_stream << "            display: flex;\n";
	HomePageView_tmp_stream << "            align-items: center;\n";
	HomePageView_tmp_stream << "            justify-content: center;\n";
	HomePageView_tmp_stream << "            margin: 20px 0;\n";
	HomePageView_tmp_stream << "            border-radius: 10px;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .article-card {\n";
	HomePageView_tmp_stream << "            background: var(--card-bg);\n";
	HomePageView_tmp_stream << "            border-radius: 8px;\n";
	HomePageView_tmp_stream << "            padding: 20px;\n";
	HomePageView_tmp_stream << "            margin: 15px 0;\n";
	HomePageView_tmp_stream << "            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n";
	HomePageView_tmp_stream << "            transition: transform 0.2s;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .article-card:hover {\n";
	HomePageView_tmp_stream << "            transform: translateY(-5px);\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .sidebar {\n";
	HomePageView_tmp_stream << "            margin-top: 20px;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .category-list {\n";
	HomePageView_tmp_stream << "            background: var(--card-bg);\n";
	HomePageView_tmp_stream << "            padding: 15px;\n";
	HomePageView_tmp_stream << "            border-radius: 8px;\n";
	HomePageView_tmp_stream << "            margin-bottom: 20px;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .tag-cloud a {\n";
	HomePageView_tmp_stream << "            display: inline-block;\n";
	HomePageView_tmp_stream << "            margin: 5px;\n";
	HomePageView_tmp_stream << "            padding: 5px 10px;\n";
	HomePageView_tmp_stream << "            background: #f1f1f1;\n";
	HomePageView_tmp_stream << "            border-radius: 15px;\n";
	HomePageView_tmp_stream << "            text-decoration: none;\n";
	HomePageView_tmp_stream << "            color: var(--text-color);\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .pagination {\n";
	HomePageView_tmp_stream << "            margin: 30px 0;\n";
	HomePageView_tmp_stream << "            text-align: center;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        .footer {\n";
	HomePageView_tmp_stream << "            text-align: center;\n";
	HomePageView_tmp_stream << "            padding: 20px;\n";
	HomePageView_tmp_stream << "            background: var(--primary-color);\n";
	HomePageView_tmp_stream << "            color: white;\n";
	HomePageView_tmp_stream << "            margin-top: 40px;\n";
	HomePageView_tmp_stream << "        }\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "        @media (max-width: 768px) {\n";
	HomePageView_tmp_stream << "            .hero-section {\n";
	HomePageView_tmp_stream << "                height: 250px;\n";
	HomePageView_tmp_stream << "            }\n";
	HomePageView_tmp_stream << "        }\n";
	HomePageView_tmp_stream << "    </style>\n";
	HomePageView_tmp_stream << "</head>\n";
	HomePageView_tmp_stream << "<body>\n";
	HomePageView_tmp_stream << "    <header class=\"header\">\n";
	HomePageView_tmp_stream << "        <div class=\"container\">\n";
	HomePageView_tmp_stream << "            <h1>";
{
    auto & val=HomePageView_view_data["site_name"];
    if(val.type()==typeid(const char *)){
        HomePageView_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        HomePageView_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	HomePageView_tmp_stream << "</h1>\n";
	HomePageView_tmp_stream << "            <nav class=\"nav-links\">\n";
	HomePageView_tmp_stream << "                <a href=\"/\">首页</a>\n";
	HomePageView_tmp_stream << "                <a href=\"/categories\">分类</a>\n";
	HomePageView_tmp_stream << "                <a href=\"/about\">关于</a>\n";
	HomePageView_tmp_stream << "            </nav>\n";
	HomePageView_tmp_stream << "        </div>\n";
	HomePageView_tmp_stream << "    </header>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "    <div class=\"hero-section\">\n";
	HomePageView_tmp_stream << "        <div class=\"container\">\n";
	HomePageView_tmp_stream << "            <h2>欢迎来到";
{
    auto & val=HomePageView_view_data["site_name"];
    if(val.type()==typeid(const char *)){
        HomePageView_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        HomePageView_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	HomePageView_tmp_stream << "</h2>\n";
	HomePageView_tmp_stream << "            <p>专注于高质量技术文章分享</p>\n";
	HomePageView_tmp_stream << "        </div>\n";
	HomePageView_tmp_stream << "    </div>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "    <div class=\"container\">\n";
	HomePageView_tmp_stream << "        <div class=\"content\">\n";
	HomePageView_tmp_stream << "            <section class=\"articles\">\n";
	HomePageView_tmp_stream << "                ";
                    // 从控制器获取文章数据 [[8]]
                    const auto &articles = HomePageView_view_data.get<std::vector<Articles>>("articles");
                    for (const auto &article : articles) {
                
	HomePageView_tmp_stream << "                <div class=\"article-card\">\n";
	HomePageView_tmp_stream << "                    <!-- 使用对象属性访问语法 ";
{
    auto & val=HomePageView_view_data["6"];
    if(val.type()==typeid(const char *)){
        HomePageView_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        HomePageView_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	HomePageView_tmp_stream << " -->\n";
	HomePageView_tmp_stream << "                    <h3><a href=\"/article/";
HomePageView_tmp_stream<<article.getId();
	HomePageView_tmp_stream << "\">";
HomePageView_tmp_stream<<article.getTitle();
	HomePageView_tmp_stream << "</a></h3>\n";
	HomePageView_tmp_stream << "                    <p class=\"meta\">\n";
	HomePageView_tmp_stream << "                        <span>作者：";
HomePageView_tmp_stream<<article.getAuthorId();
	HomePageView_tmp_stream << "</span>\n";
	HomePageView_tmp_stream << "                        <span>•</span>\n";
	HomePageView_tmp_stream << "                        <span>";
HomePageView_tmp_stream<<article.getDate().substr(0,10);
	HomePageView_tmp_stream << "</span> <!-- 日期截断 -->\n";
	HomePageView_tmp_stream << "                        <span>•</span>\n";
	HomePageView_tmp_stream << "                        <span>分类：";
HomePageView_tmp_stream<<article.getCategory();
	HomePageView_tmp_stream << "</span>\n";
	HomePageView_tmp_stream << "                    </p>\n";
	HomePageView_tmp_stream << "                    <div class=\"excerpt\">\n";
	HomePageView_tmp_stream << "                        ";
HomePageView_tmp_stream<<article.getExcerpt();
	HomePageView_tmp_stream << "                    </div>\n";
	HomePageView_tmp_stream << "                    <div class=\"tags\">\n";
	HomePageView_tmp_stream << "                        ";
                            // 分割标签字符串 [[8]]
                            std::string tagsStr = article.getValueOfTag();
                            std::vector<std::string> tags;
                            size_t pos;
                            while ((pos = tagsStr.find(',')) != std::string::npos) {
                                tags.push_back(tagsStr.substr(0, pos));
                                tagsStr = tagsStr.substr(pos + 1);
                            }
                            if (!tagsStr.empty()) tags.push_back(tagsStr);
                            for (const auto &tag : tags) {
                        
	HomePageView_tmp_stream << "                        <span class=\"tag\">#";
HomePageView_tmp_stream<<tag;
	HomePageView_tmp_stream << "</span>\n";
	HomePageView_tmp_stream << "                        ";
 } 
	HomePageView_tmp_stream << "                    </div>\n";
	HomePageView_tmp_stream << "                </div>\n";
	HomePageView_tmp_stream << "                ";
 } 
	HomePageView_tmp_stream << "            </section>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "            <aside class=\"sidebar\">\n";
	HomePageView_tmp_stream << "                <div class=\"widget category-list\">\n";
	HomePageView_tmp_stream << "                    <h4>分类</h4>\n";
	HomePageView_tmp_stream << "                    <ul>\n";
	HomePageView_tmp_stream << "                        ";
                            // 获取分类数据 [[6]]
                            const auto& categories = HomePageView_view_data.get<std::map<std::string, std::string>>("categories");
                            for (const auto &[cat, count] : categories) {
                        
	HomePageView_tmp_stream << "                        <li><a href=\"/category/";
HomePageView_tmp_stream<<cat;
	HomePageView_tmp_stream << "\">";
HomePageView_tmp_stream<<cat;
	HomePageView_tmp_stream << " ";
HomePageView_tmp_stream<<count;
	HomePageView_tmp_stream << "</a></li>\n";
	HomePageView_tmp_stream << "                        ";
 } 
	HomePageView_tmp_stream << "                    </ul>\n";
	HomePageView_tmp_stream << "                </div>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "                <div class=\"widget hot-articles\">\n";
	HomePageView_tmp_stream << "                    <h4>热门文章</h4>\n";
	HomePageView_tmp_stream << "                    ";
                        // 获取热门文章数据 [[8]]
                        const auto &hot_articles = HomePageView_view_data.get<std::vector<Articles>>("hot_articles");
                        for (const auto &article : hot_articles) {
                    
	HomePageView_tmp_stream << "                    <div class=\"hot-item\"><a href=\"/article/";
HomePageView_tmp_stream<<article.getId();
	HomePageView_tmp_stream << "\">";
HomePageView_tmp_stream<<article.getTitle();
	HomePageView_tmp_stream << "</a></div>\n";
	HomePageView_tmp_stream << "                    ";
 } 
	HomePageView_tmp_stream << "                </div>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "                <div class=\"widget tag-cloud\">\n";
	HomePageView_tmp_stream << "                    <h4>标签云</h4>\n";
	HomePageView_tmp_stream << "                    ";
                        // 获取标签数据 [[6]]
                        const auto &tags = HomePageView_view_data.get<std::vector<std::string>>("tags");
                        for (const auto &tag : tags) {
                    
	HomePageView_tmp_stream << "                    <a href=\"/tag/";
HomePageView_tmp_stream<<tag;
	HomePageView_tmp_stream << "\">";
HomePageView_tmp_stream<<tag;
	HomePageView_tmp_stream << "</a>\n";
	HomePageView_tmp_stream << "                    ";
 } 
	HomePageView_tmp_stream << "                </div>\n";
	HomePageView_tmp_stream << "            </aside>\n";
	HomePageView_tmp_stream << "        </div>\n";
	HomePageView_tmp_stream << "    </div>\n";
HomePageView_tmp_stream<<"\n";
	HomePageView_tmp_stream << "    <footer class=\"footer\">\n";
	HomePageView_tmp_stream << "        <div class=\"container\">\n";
	HomePageView_tmp_stream << "            <p>&copy; 2023 ";
{
    auto & val=HomePageView_view_data["site_name"];
    if(val.type()==typeid(const char *)){
        HomePageView_tmp_stream<<*(std::any_cast<const char *>(&val));
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        HomePageView_tmp_stream<<*(std::any_cast<const std::string>(&val));
    }
}
	HomePageView_tmp_stream << " 版权所有</p>\n";
	HomePageView_tmp_stream << "            <p>Powered by Drogon Framework</p>  \n";
	HomePageView_tmp_stream << "        </div>\n";
	HomePageView_tmp_stream << "    </footer>\n";
	HomePageView_tmp_stream << "</body>\n";
	HomePageView_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(HomePageView_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = HomePageView_view_data;
auto str = std::move(HomePageView_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
