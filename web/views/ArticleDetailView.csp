<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% @@.get<std::string>("title") %} - Tiny Blog</title>

    <!-- 引入 Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- 引入 Prism.js 样式和核心库 -->
    <!-- 引入 Prism.js 样式和核心库 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-cpp.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-ruby.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-go.min.js"></script>
    <!-- 自定义样式 -->
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: #34495e;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* 左侧导航栏 */
        .sidebar {
            position: fixed;
            top: 60px;
            left: 0;
            width: 250px;
            height: calc(100vh - 60px);
            background: white;
            border-right: 1px solid #eaeaea;
            overflow-y: auto;
            transition: transform 0.3s ease;
        }

        .sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar li {
            padding: 8px 15px;
            cursor: pointer;
        }

        .sidebar li a {
        color: #34495e !important; /* 设置为深灰色 */
        text-decoration: none !important; /* 移除下划线 */
        transition: color 0.3s ease;
    }

        .sidebar li:hover a {
            color: #4CAF50 !important; /* 鼠标悬停时变为绿色 */
        }

        .sidebar li.active a {
            color: #4CAF50 !important; /* 当前激活项为绿色 */
        }

        /* 主内容区域 */
        .main-content {
            margin-left: 270px;
            padding: 20px;
            background: white;
            min-height: 100vh;
        }

        .article-header {
            text-align: center;
            margin-bottom: 30px;
            margin-top: 60px; /* 增加顶部外边距 */
        }

        .article-meta {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 10px;
            color: #666;
        }

        .content-box {
            background: white;
            padding: 20px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        /* 标签样式 */
        .tags {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .tag {
            background: #4CAF50;
            color: white; /* 确保文字颜色为白色 */
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9em;
            text-decoration: none !important; /* 移除下划线 */
        }

        .tag a {
            color: inherit; /* 继承父元素颜色 */
            text-decoration: none; /* 移除链接下划线 */
        }

        /* 响应式设计 */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-250px);
            }
            .main-content {
                margin-left: 0;
            }
        }

        /* 代码高亮样式 */
        pre code {
            display: block;
            padding: 1rem;
            overflow-x: auto;
            line-height: 1.5;
        }

        /* 右侧目录样式 */
        .right-sidebar {
            position: fixed;
            top: 60px;
            right: 0;
            width: 250px;
            height: calc(100vh - 60px);
            overflow-y: auto;
            background: #fff;
            border-left: 1px solid #eaeaea;
        }

        .right-sidebar h4 {
            padding: 15px;
            border-bottom: 1px solid #eaeaea;
        }

        .right-sidebar ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .right-sidebar li {
            padding: 8px 15px;
            cursor: pointer;
        }

        .right-sidebar li:hover {
            background: #f5f5f5;
        }

        /* 搜索栏样式 */
        .search-bar {
            position: fixed;
            top: 0px;
            left:0%;
            display: flex;
            align-items: center;
            background: white;
            padding: 8px 15px;
            border-radius: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .search-bar input {
            border: none;
            outline: none;
            padding: 5px;
            font-size: 0.9em;
        }

        .search-bar button {
            background: none;
            border: none;
            cursor: pointer;
            margin-left: 10px;
        }

        /* 移除右侧目录链接的下划线 */
        .right-sidebar a {
            color: #4CAF50; /* 设置为绿色 */
            text-decoration: none !important;
            transition: text-decoration 0.3s ease;
        }

        .right-sidebar a:hover {
            text-decoration: underline !important;
        }
    </style>
</head>
<body>
    <!-- 移动搜索栏到左侧导航栏顶部 -->
    <div class="search-bar">
        <input type="text" id="search-input" placeholder="Search...">
        <button>🔍</button>
    </div>

    <!-- 左侧导航栏 -->
    <div class="sidebar">
        <ul id="nav-links">
            <%c++
                // 获取左侧导航栏链接
                std::vector<std::pair<std::string, std::string>> sidebarLinks = @@.get<std::vector<std::pair<std::string, std::string>>>("sidebarLinks");
                for (const auto &link : sidebarLinks) {
            %>
            <li><a href="{% link.first %}">{% link.second %}</a></li>
            <%c++ } %>
        </ul>
    </div>
    
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // 内容是通过 AJAX 或模板引擎动态插入的
        const content = `{% @@.get<std::string>("content") %}`;
        document.getElementById('article-content').innerHTML = content;
        Prism.highlightAll(); // 重新高亮
    });
</script>

    <!-- 动态导航高亮 -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const navLinks = document.querySelectorAll('#nav-links li');
            const searchInput = document.getElementById('search-input');

            // 添加搜索输入事件监听器
            searchInput.addEventListener('input', () => {
                const filter = searchInput.value.toLowerCase();
                navLinks.forEach(link => {
                    const text = link.textContent.toLowerCase();
                    if (text.includes(filter)) {
                        link.style.display = '';
                    } else {
                        link.style.display = 'none';
                    }
                });
            });

            // 获取左侧导航栏链接
            const navLinks = document.querySelectorAll('#nav-links li');
            const sections = document.querySelectorAll('.main-content > div');

            window.addEventListener('scroll', () => {
                let currentSection = '';
                sections.forEach(section => {
                    const rect = section.getBoundingClientRect();
                    if (rect.top <= 150 && rect.bottom >= 150) {
                        currentSection = section.id;
                    }
                });

                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('data-target') === `#${currentSection}`) {
                        link.classList.add('active');
                    }
                });
            });

            // 处理锚点跳转
            const hash = window.location.hash;
            if (hash) {
                const targetElement = document.querySelector(hash);
                if (targetElement) {
                    targetElement.scrollIntoView({ behavior: 'smooth' });
                }
            }
        });
    </script>

    <!-- 主内容区域 -->
    <div class="main-content">
        <div class="container">
            <div class="article-header">
                <h1>{% @@.get<std::string>("title") %}</h1>
                <div class="article-meta">
                    <span>Author: {% @@.get<std::string>("author") %}</span>
                    <span>Date: {% @@.get<std::string>("date") %}</span>
                    <span>Category: {% @@.get<std::string>("category") %}</span>
                </div>
            </div>
            <div class="content-box" id="article-content">
                <%c++
                    // 确保文章内容中的标题标签带有 id 属性
                    std::string content = @@.get<std::string>("content");
                %>
                {% content %}
            </div>
            <div class="tags">
                <%c++
                    // 分割标签字符串
                    std::string tagsStr = @@.get<std::string>("tags");
                    std::vector<std::string> tags;
                    size_t tagPos;
                    while ((tagPos = tagsStr.find(',')) != std::string::npos) {
                        tags.push_back(tagsStr.substr(0, tagPos));
                        tagsStr = tagsStr.substr(tagPos + 1);
                    }
                    if (!tagsStr.empty()) tags.push_back(tagsStr);
                    for (const auto &tag : tags) {
                %>
                <span class="tag">#<a href="/tag/{% tag %}">{% tag %}</a></span>
                <%c++ } %>
            </div>
        </div>
    </div>

<!-- 自动生成右侧目录 -->
<div class="right-sidebar">
    <h4>目录</h4>
    <ul id="toc"></ul>
</div>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const toc = document.getElementById('toc');
        const headings = document.querySelectorAll('#article-content h1, #article-content h2, #article-content h3, #article-content h4, #article-content h5');

    headings.forEach(heading => {
        // 确保每个标题都有一个唯一的 id
        if (!heading.id) {
            heading.id = 'heading-' + ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            ).replace(/-/g, '');
        }

        const listItem = document.createElement('li');
        const anchor = document.createElement('a');
        anchor.href = `#${heading.id}`;
        anchor.textContent = heading.textContent;
        listItem.appendChild(anchor);
        toc.appendChild(listItem);
    });

        // 添加滚动事件监听器
        window.addEventListener('scroll', () => {
            let currentSection = '';
            headings.forEach(section => {
                const rect = section.getBoundingClientRect();
                if (rect.top <= 150 && rect.bottom >= 150) {
                    currentSection = section.id;
                }
            });

            const tocLinks = document.querySelectorAll('#toc a');
            tocLinks.forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href').substring(1) === currentSection) {
                    link.classList.add('active');
                }
            });
        });

        // 处理锚点跳转
        const hash = window.location.hash;
        if (hash) {
            const targetElement = document.querySelector(hash);
            if (targetElement) {
                // 修改 scrollIntoView 的选项以确保平滑滚动到正确的位置
                targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
    });
    </script>

</body>
</html>