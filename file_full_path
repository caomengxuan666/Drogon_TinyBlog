#include "login.h"
#include "../models/Users.h" // 引入 Users 模型
#include <drogon/orm/DbClient.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Logger.h>

// 显示登录页面
void login::LoginPage(const HttpRequestPtr &req,
                      std::function<void(const HttpResponsePtr &)> &&callback) {
    // 返回登录页面的 HTML 内容
    auto resp = HttpResponse::newFileResponse("./views/templates/login.html");
    callback(resp);
}

// 处理登录请求
void login::handleLogin(const HttpRequestPtr &req,
                        std::function<void(const HttpResponsePtr &)> &&callback) {
    LOG_DEBUG << "Handling login request";

    // 从请求中获取 userId 和 password
    auto userId = req->getParameter("userId");
    auto password = req->getParameter("password");

    // 获取数据库客户端
    auto dbClient = drogon::app().getDbClient();

    // 使用 Mapper 查询用户信息
    auto mapper = drogon::orm::Mapper<drogon_model::sqlite3::Users>(dbClient);
    mapper.findBy(drogon_model::sqlite3::Users::Cols::_username, userId)
        .then([password, callback](std::vector<drogon_model::sqlite3::Users> users) {
            if (users.empty()) {
                // 用户不存在
                Json::Value ret;
                ret["result"] = "error";
                ret["message"] = "User not found";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                resp->setStatusCode(HttpStatusCode::k401Unauthorized);
                callback(resp);
                return;
            }

            // 验证密码
            auto user = users.front();
            if (user.getPassword() == password) {
                // 认证成功
                Json::Value ret;
                ret["result"] = "ok";
                ret["token"] = drogon::utils::getUuid();
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                callback(resp);
            } else {
                // 密码错误
                Json::Value ret;
                ret["result"] = "error";
                ret["message"] = "Invalid password";
                auto resp = HttpResponse::newHttpJsonResponse(ret);
                resp->setStatusCode(HttpStatusCode::k401Unauthorized);
                callback(resp);
            }
        })
        .otherwise([callback](const drogon::orm::DrogonDbException &e) {
            LOG_ERROR << "Database error: " << e.base().what();
            Json::Value ret;
            ret["result"] = "error";
            ret["message"] = "Database error";
            auto resp = HttpResponse::newHttpJsonResponse(ret);
            resp->setStatusCode(HttpStatusCode::k500InternalServerError);
            callback(resp);
        });
}

void login::RegisPage(const HttpRequestPtr &req,
                      std::function<void(const HttpResponsePtr &)> &&callback) {
    // 返回注册页面的 HTML 内容
    auto resp = HttpResponse::newFileResponse("./views/templates/regis.html");
    callback(resp);
}

void login::handleRegis(const HttpRequestPtr &req,
                        std::function<void(const HttpResponsePtr &)> &&callback) {
    // 处理注册请求的逻辑
    // ...
}

void login::redirectVerify(const HttpRequestPtr &req,
                           std::function<void(const HttpResponsePtr &)> &&callback) {
    // 处理重定向验证请求的逻辑
    // ...
}

void login::generateQRCode(const HttpRequestPtr &req,
                           std::function<void(const HttpResponsePtr &)> &&callback) {
    // 生成二维码的逻辑
    // ...
}

void login::generateVerifyToken(const HttpRequestPtr &req,
                                std::function<void(const HttpResponsePtr &)> &&callback) {
    // 生成验证令牌的逻辑
    // ...
}